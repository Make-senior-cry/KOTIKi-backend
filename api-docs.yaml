openapi: 3.0.1
info:
  title: KOTIKI API
  description: API for the social network KOTIKI
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /user:
    get:
      tags:
      - user-controller
      operationId: getUser
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
      - user-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /user/follow:
    post:
      tags:
      - user-controller
      operationId: followUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /post:
    get:
      tags:
      - post-controller
      operationId: getPosts
      parameters:
      - name: user_id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: skip
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserPageDto'
    post:
      tags:
      - post-controller
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /post/report:
    post:
      tags:
      - post-controller
      operationId: reportPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /post/like:
    post:
      tags:
      - post-controller
      operationId: likePost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /post/ban:
    post:
      tags:
      - post-controller
      operationId: banPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int64
        required: true
      responses:
        "200":
          description: OK
  /msg:
    get:
      tags:
      - message-controller
      operationId: health
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
      - message-controller
      operationId: send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/sign-up:
    post:
      tags:
      - auth-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /auth/sign-out:
    post:
      tags:
      - auth-controller
      operationId: signOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/sign-in:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /search/user:
    get:
      tags:
      - search-controller
      operationId: searchUsers
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: skip
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchUsersDto'
  /msg/sub:
    get:
      tags:
      - message-controller
      operationId: receiveNewMessages
      parameters:
      - name: senderId
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            text/event-stream:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
  /healthcheck:
    get:
      tags:
      - health-controller
      operationId: healthcheck
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /feed:
    get:
      tags:
      - post-controller
      operationId: getFeed
      parameters:
      - name: type
        in: query
        required: true
        schema:
          type: string
          enum:
          - FOLLOWING
          - NEW
      - name: skip
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FeedDto'
components:
  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imageUrl:
          type: string
        description:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
        followersCount:
          type: integer
          format: int32
        followingCount:
          type: integer
          format: int32
    ChatMessage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        sendTimestamp:
          type: string
          format: date-time
        senderId:
          type: integer
          format: int64
        receiverId:
          type: integer
          format: int64
        checked:
          type: boolean
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imagePath:
          type: string
        description:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
        creationTimestamp:
          type: string
          format: date-time
        enabled:
          type: boolean
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
    SearchUsersDto:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        hasPrev:
          type: boolean
        hasNext:
          type: boolean
        skip:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    LightPostDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        banned:
          type: boolean
        likesCount:
          type: integer
          format: int32
        reportsCount:
          type: integer
          format: int32
    UserPageDto:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/LightPostDto'
        author:
          $ref: '#/components/schemas/UserDto'
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        skip:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    FeedDto:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostDto'
        hasNext:
          type: boolean
        hasPrev:
          type: boolean
        skip:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
    PostDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        banned:
          type: boolean
        likesCount:
          type: integer
          format: int32
        reportsCount:
          type: integer
          format: int32
        author:
          $ref: '#/components/schemas/UserDto'
