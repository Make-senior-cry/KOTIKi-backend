openapi: 3.0.1
info:
  title: KOTIKI API
  description: API for the social network KOTIKI
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /user:
    get:
      tags:
      - User interaction
      operationId: getUser
      parameters:
      - name: id
        in: query
        required: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
      - User interaction
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /auth/sign-up:
    post:
      tags:
      - Registration and authentication
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /auth/sign-out:
    post:
      tags:
      - Registration and authentication
      operationId: signOut
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /auth/sign-in:
    post:
      tags:
      - Registration and authentication
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /search/user:
    get:
      tags:
      - User interaction
      operationId: searchUsers
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: skip
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SearchUsersDto'
components:

  schemas:
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imageUrl:
          type: string
        description:
          type: string
        email:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
        followersCount:
          type: integer
          format: int32
        followingCount:
          type: integer
          format: int32
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        imagePath:
          type: string
        description:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
          - ROLE_ADMIN
        creationTimestamp:
          type: string
          format: date-time
        enabled:
          type: boolean
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        username:
          type: string
        credentialsNonExpired:
          type: boolean
        accountNonExpired:
          type: boolean
        accountNonLocked:
          type: boolean
    SearchUsersDto:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        hasPrev:
          type: boolean
        hasNext:
          type: boolean
        skip:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
